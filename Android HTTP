Android HTTP Communication
Austin Stoddard notes:

Android has 2 main HTTP clients: 
    -- Apache HTTP Client
        -- not recommended as Google is focusing on using HttpURLConnection
    -- HttpURLConnection
        -- a general-purpose, lightweight HTTP client suitable for most applications
        -- simple API and small size makes it great fit for Android
        
-- To access the Internet your application requires the android.permission.INTERNET permission.
-- To check the network state your application requires the android.permission.ACCESS_NETWORK_STATE permission.

-- Java provides a general-purpose, lightweight HTTP client API to access resources via the HTTP or HTTPS protocol. 
	-- The main classes to access the Internet are the java.net.URL class and the java.net.HttpURLConnection class.
		-- The URL class can be used to define a pointer to a web resource
		-- The HttpURLConnection class can be used to access a web resource.
			-- HttpURLConnection allows you to create an InputStream.
				-- Once you have accessed an InputStream you can read it similarly to an InputStream from a local file.
				
				
The following is an example of retrieving a webpage:

try {
  URL url = new URL("http://www.vogella.com");
  HttpURLConnection con = (HttpURLConnection) url
    .openConnection();
  readStream(con.getInputStream());
  } catch (Exception e) {
  e.printStackTrace();
}

private void readStream(InputStream in) {
  BufferedReader reader = null;
  try {
    reader = new BufferedReader(new InputStreamReader(in));
    String line = "";
    while ((line = reader.readLine()) != null) {
      System.out.println(line);
    }
  } catch (IOException e) {
    e.printStackTrace();
  } finally {
    if (reader != null) {
      try {
        reader.close();
      } catch (IOException e) {
        e.printStackTrace();
        }
    }
  }
} 


Check the network availability:

public boolean isNetworkAvailable() {
    ConnectivityManager cm = (ConnectivityManager) 
      getSystemService(Context.CONNECTIVITY_SERVICE);
    NetworkInfo networkInfo = cm.getActiveNetworkInfo();
    // if no network is available networkInfo will be null
    // otherwise check if we are connected
    if (networkInfo != null && networkInfo.isConnected()) {
        return true;
    }
    return false;
} 
