Austin Stoddard
My understanding of threads.
Threads are sometimes called lightweight processes. 
A Thread is the independent path of execution in a program. Many thread runs concurrently with a program. 
Some threads are Multithread, This thread refers to two or more thread running simultaneously within a program. 
The thread in java is created and controlled by the java.lang.Threadclass.
Both processes and threads provide an execution environment, but creating a new thread requires fewer resources than creating a new process.
Threads exist within a process â€” every process has at least one. 
    Threads share the process's resources, including memory and open files.
Multithreaded execution is an essential feature of the Java platform. 
Every application has at least one thread - the main thread.
    This Thread has the ability to create additional threads.

Each thread is associated with an instance of the class Thread. 
There are two basic strategies for using Thread objects to create a concurrent application.
    To directly control thread creation and management, simply instantiate Thread each time the application needs to initiate an       asynchronous task.
    To abstract thread management from the rest of your application, pass the application's tasks to an executor.


Defining and Starting a Thread
An application that creates an instance of Thread must provide the code that will run in that thread. 
There are two ways to do this:
    Provide a Runnable object. The Runnable interface defines a single method, run, meant to contain the code executed in the         thread. This way is more general, because the Runnable object can subclass a class other than Thread.
    The Runnable object is passed to the Thread constructor, as in the HelloRunnable example:
    
    public class HelloRunnable implements Runnable {
    public void run() {
        System.out.println("Hello from a thread!");
    }
    public static void main(String args[]) {
        (new Thread(new HelloRunnable())).start();
    }
  }
  
  Subclass Thread. The Thread class itself implements Runnable, though its run method does nothing. This way is easier to use       in simple applications, but is limited by the fact that your task class must be a descendant of Thread.
  An application can subclass Thread, providing its own implementation of run, as in the HelloThread example:
  
  public class HelloThread extends Thread {
    public void run() {
        System.out.println("Hello from a thread!");
    }
    public static void main(String args[]) {
        (new HelloThread()).start();
    }
}
(Notice that both examples invoke Thread.start in order to start the new thread.)


Pausing Execution with Sleep
Thread.sleep causes the current thread to suspend execution for a specified period.
    This is an efficient means of making processor time available to the other threads
Thread.sleep(4000); //Pause for 4 seconds


Interrupts
An interrupt is an indication to a thread that it should stop what it is doing and do something else.
A thread sends an interrupt by invoking interrupt on the Thread object for the thread to be interrupted.
    For the interrupt mechanism to work correctly, the interrupted thread must support its own interruption.


Joins
The join method allows one thread to wait for the completion of another. 
If t is a Thread object whose thread is currently executing, 
    t.join();    causes the current thread to pause execution until t's thread terminates.
Overloads of join allow the programmer to specify a waiting period.
Like sleep, join responds to an interrupt by exiting with an InterruptedException.
